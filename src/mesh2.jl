# Declaramos las clases
abstract type AbstractPolygonalMesh end

struct Node{T}
    x::T
    ref::Int64
end

get_coords(node::Node) = node.x

struct Element
    nodes::Vector{Int64}
    faces::Vector{Int64}
end
struct Face
    elements::Vector{Int64}
    nodes::Vector{Int64}
    ref::Int64
end
struct PolygonalMesh{T} <: AbstractPolygonalMesh
    elements::Vector{Element}
    nodes::Vector{Node{T}}
    faces::Vector{Face}
end

#Only working for simplices
function get_element_diameter(mesh::PolygonalMesh{T}, idx::Int) where {T}
    K = mesh.elements[idx]
    h = zero(eltype(T))
    for k in K.faces
        σ = mesh.faces[k]
        mσ = norm(get_coords(mesh.nodes[σ.nodes[2]]) - get_coords(mesh.nodes[σ.nodes[1]]))
        h = max(h, mσ)
    end
    h
end


# Read mesh from a triangle generated file
function read_line(ln, types)
    m2 = matchall(r"\b((\d*\.)?\d+)\b", ln)
    return (parse(types[i],x) for (i,x) in enumerate(m2))
end

function parse_nodes!(nodes,root_file)
    open(root_file*".node") do f
        first_line = true
        for ln in eachline(f)
            m = match(r"^\s*(?:#|$)", ln)
            if m == nothing
                if (first_line)   #skip first line
                    first_line = false
                else
                    #parse nodes
                    pln = collect(read_line(ln, (Int,Float64,Float64,Int)))
                    node = Node(pln[2:3],pln[4])
                    push!(nodes,node)
                end
            end
        end
    end
end

function parse_faces!(faces,root_file)
    open(root_file*".face") do f
        first_line = true
        for ln in eachline(f)
            m = match(r"^\s*(?:#|$)", ln)
            if m == nothing
                if (first_line)   #skip first line
                    first_line = false
                else
                    #parse nodes
                    pln = collect(read_line(ln, (Int,Int,Int,Int)))
                    face = Face(Vector{Int}(),pln[2:3],pln[4])
                    push!(faces, face)
                end
            end
        end
    end
end

function parse_elements!(elements,faces,root_file)
    all_nodes = Vector{Vector{Node}}()
    #read element nodes
    open(root_file*".ele") do f
        first_line = true
        n_el = 0
        for ln in eachline(f)
            m = match(r"^\s*(?:#|$)", ln)
            if m == nothing
                if (first_line)   #skip first line
                    first_line = false
                else
                    n_el = n_el + 1
                    #parse nodes
                    pln = collect(read_line(ln, (Int,Int,Int,Int)))
                    el_nodes = pln[2:4]
                    el_faces = [-1,-1,-1]
                    #look for faces
                    for (i,c_face) in enumerate([el_nodes[1:2],el_nodes[2:3],
                        [el_nodes[3],el_nodes[1]]])
                        for (j,face) in enumerate(faces)
                            if sort(face.nodes) == sort(c_face)
                                el_faces[i] = j
                                if !(n_el in face.elements)
                                    push!(face.elements,n_el)
                                end
                            end
                        end
                    end
                    #save element
                    element = Element(el_nodes, el_faces)
                    push!(elements, element)
                end
            end
        end
    end
end

"""
function parse_mesh_triangle(root_file)
read mesh generated by triangle with root file name `root_file`
Ex: `parse_mesh_triangle("figure.1")`
"""
function parse_mesh_triangle(root_file)
    nodes = Vector{Node}()
    faces = Vector{Face}()
    elements = Vector{Element}()
    parse_nodes!(nodes,root_file)
    parse_faces!(faces,root_file)
    parse_elements!(elements, faces, root_file)
    PolygonalMesh{typeof(nodes[1].x)}(elements, nodes, faces)
end
